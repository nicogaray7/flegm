const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üîç V√©rification de l\'environnement de d√©veloppement...\n');

// V√©rification de Node.js
try {
  const nodeVersion = process.version;
  const major = parseInt(nodeVersion.slice(1).split('.')[0]);
  console.log(`üì¶ Node.js version: ${nodeVersion}`);
  if (major !== 18) {
    console.warn('‚ö†Ô∏è  Attention: La version recommand√©e de Node.js est v18.x');
  }
} catch (error) {
  console.error('‚ùå Erreur lors de la v√©rification de Node.js:', error);
}

// V√©rification de MongoDB
try {
  execSync('mongod --version');
  console.log('‚úÖ MongoDB est install√©');
} catch (error) {
  console.error('‚ùå MongoDB n\'est pas install√© ou n\'est pas accessible');
}

// V√©rification des fichiers .env
const envFiles = {
  backend: ['.env', '.env.development', '.env.production'],
  frontend: ['.env.local', '.env.development', '.env.production']
};

for (const [project, files] of Object.entries(envFiles)) {
  console.log(`\nüîç V√©rification des fichiers .env pour ${project}:`);
  files.forEach(file => {
    const filePath = path.join(__dirname, '..', project, file);
    if (fs.existsSync(filePath)) {
      console.log(`‚úÖ ${file} existe`);
    } else {
      console.warn(`‚ö†Ô∏è  ${file} est manquant`);
    }
  });
}

// V√©rification des ports
try {
  const portsOutput = execSync('lsof -i :3000,5000 -P -n').toString();
  if (portsOutput) {
    console.warn('\n‚ö†Ô∏è  Certains ports sont d√©j√† utilis√©s:');
    console.log(portsOutput);
  } else {
    console.log('\n‚úÖ Les ports 3000 et 5000 sont disponibles');
  }
} catch (error) {
  console.log('\n‚úÖ Les ports 3000 et 5000 sont disponibles');
}

// V√©rification des d√©pendances
console.log('\nüì¶ V√©rification des d√©pendances...');
try {
  execSync('npm audit', { stdio: 'inherit' });
} catch (error) {
  console.warn('‚ö†Ô∏è  Des vuln√©rabilit√©s ont √©t√© trouv√©es dans les d√©pendances');
}

console.log('\n‚ú® V√©rification termin√©e'); 